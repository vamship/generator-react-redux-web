'use strict';

/**
 * Represents a url path with replaceable parameters. This utility class can be
 * used to generate paths for redirect requests/API calls, and also for route
 * definitions within teh web application.
 *
 * Methods allow access to the raw template path, and a specific path instance
 * generated by replacing placeholders with parameter values.
 */
class UrlPathTemplate {
    /**
     * @param {String} pathTemplate The path template. Dynamic parameters
     *        can be specified by suffixing it with a ':'.
     */
    constructor(pathTemplate) {
        if (typeof pathTemplate !== 'string' || pathTemplate.length <= 0) {
            throw new Error('Invalid pathTemplate specified (arg #1)');
        }

        this._pathTemplate = pathTemplate;
    }

    /**
     * The path template represented by this object. This value can be used to
     * define routes within the app.
     *
     * @return {String} The path template represented by this object.
     */
    get pathTemplate() {
        return this._pathTemplate;
    }

    /**
     * Returns a path instance by replacing parameters in the path with
     * specified values.
     *
     * @param {Object} [params={}] An optional parameters object.
     *
     * @return {String} A path instance that is generated using the specified
     *         parameter values.
     */
    getPath(params) {
        if (!params || (params instanceof Array) || typeof params !== 'object') {
            params = {};
        }
        let path = this.pathTemplate;
        for (let paramName in params) {
            const paramValue = params[paramName];
            const pat = new RegExp(`:${paramName}`, 'g');
            path = path.replace(pat, paramValue);
        }
        return path;
    }

    /**
     * Overridden to string method for the class.
     *
     * @override
     * @return {String} A string representation of the object.
     */
    toString() {
        return this.pathTemplate;
    }
}

export default UrlPathTemplate;
